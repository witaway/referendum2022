generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
  projectDatabaseType = "PostgreSQL"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum Role {
  EDITOR
  OBSERVER
}

// ----------------------------------------------------------------------------------
// Place section

model User {
  id          Int           @id                 @default(autoincrement())
  FIO         String        @db.VarChar(60)
  login       String        @unique             @db.VarChar(60)
  password    String
  role        Role

  places      Place[]
}

model Place {
  id          Int           @id                 @default(autoincrement())
  editorId    Int
  number      Int
  address     String        @db.VarChar(200)

  protocols   Protocol[]
  votes       Votes[]
  editor      User          @relation(fields: [editorId], references: [id])
}

// -----------------------------------------------------------------------------------
// Tour section

model Tour {
    id          Int           @id               @default(autoincrement())
    number      Int           @unique
    name        String        @db.VarChar(100)

    votes       Votes[]
    options     Option[]
    protocols   Protocol[]
}

model Option {
    id          Int           @id               @default(autoincrement())
    tourId      Int
    name        String        @db.VarChar(100)

    votes       Votes[]
    tour        Tour          @relation(fields: [tourId], references: [id])
}

// ------------------------------------------------------------------------------------
// Protocol section

model Protocol {
  placeId       Int
  tourId        Int
  
  p_1           Int
  p_2           Int
  p_3           Int
  p_3_1         Int
  p_3_2         Int
  p_3_3         Int
  p_8           Int
  p_9           Int
  p_10          Int
  p_11          Int

  place         Place @relation(fields: [placeId], references: [id])
  tour          Tour  @relation(fields: [tourId], references: [id])
  @@id([tourId, placeId])
}

model Votes {
  placeId       Int
  tourId        Int
  
  optionId      Int
  count         Int

  option        Option @relation(fields: [optionId], references: [id])
  place         Place @relation(fields: [placeId], references: [id])
  tour          Tour @relation(fields: [tourId], references: [id])
  @@id([tourId, placeId])
}

// model option {
//   id           Int       @id @default(autoincrement())
//   id_tur       Int
//   FIO          String    @db.Char(60)
//   tur          tur       @relation(fields: [id_tur], references: [id_tur], onUpdate: Restrict, map: "candidate_ibfk_1")
//   candres      candres[]
// }

// model candres {
//   id_candidate Int
//   id_place     Int
//   resultate    Int
//   candidate    candidate @relation(fields: [id_candidate], references: [id_candidate], onUpdate: Restrict, map: "candres_ibfk_1")
//   place        place     @relation(fields: [id_place], references: [id_place], onUpdate: Restrict, map: "candres_ibfk_2")

//   @@id([id_candidate, id_place])
// }

// model commem {
//   id_ComMem Int    @id @default(autoincrement())
//   id_place  Int
//   FIO       String @db.Char(60)
//   place     place  @relation(fields: [id_place], references: [id_place], onUpdate: Restrict, map: "commem_ibfk_1")
// }

// model dbusers {
//   id_user   Int         @id @default(autoincrement())
//   FIO       String?     @db.Char(60)
//   login     String      @unique(map: "login") @db.Char(30)
//   password  String      @db.Char(30)
//   role      String      @db.Char(30)
//   userplace userplace[]
// }

// model place {
//   id_place     Int         @id @default(autoincrement())
//   place_number Int         @unique(map: "place_number")
//   place_adress String?     @db.Char(200)
//   candres      candres[]
//   commem       commem[]
//   protocol     protocol[]
//   userplace    userplace[]
// }

// model protocol {
//   id_tur   Int
//   id_place Int
//   p_1      Int
//   p_2      Int
//   p_3      Int
//   p_3_1    Int
//   p_3_2    Int
//   p_3_3    Int
//   p_8      Int
//   p_9      Int
//   p_10     Int
//   p_11     Int
//   tur      tur   @relation(fields: [id_tur], references: [id_tur], onUpdate: Restrict, map: "protocol_ibfk_1")
//   place    place @relation(fields: [id_place], references: [id_place], onUpdate: Restrict, map: "protocol_ibfk_2")

//   @@id([id_tur, id_place])
// }

// model tur {
//   id_tur     Int         @id @default(autoincrement())
//   tur_number Int         @unique(map: "tur_number")
//   tur_name   String      @unique(map: "tur_name") @db.Char(50)
//   candidate  candidate[]
//   protocol   protocol[]
// }

// model userplace {
//   id_user  Int
//   id_place Int
//   dbusers  dbusers @relation(fields: [id_user], references: [id_user], onUpdate: Restrict, map: "userplace_ibfk_1")
//   place    place   @relation(fields: [id_place], references: [id_place], onUpdate: Restrict, map: "userplace_ibfk_2")

//   @@id([id_user, id_place])
// }
